int numSquares(int n) {
        // vector<int> squares;
        // for (int i = 1; i * i <= n; i++) {
        //     squares.push_back(i * i);
        // }
        // int m = squares.size();
        // vector<vector<int>> dp(m + 1, vector<int>(n + 1, INT_MAX));
        // for (int i = 0; i <= m; i++) {
        //     dp[i][0] = 0;
        // }
        // for (int i = 1; i <= m; i++) {
        //     for (int j = 1; j <= n; j++) {
        //         if (squares[i - 1] > j) {
        //             dp[i][j] = dp[i - 1][j]; 
        //         } else {
        //             dp[i][j] = min(dp[i - 1][j], 1 + dp[i][j - squares[i - 1]]);
        //         }
        //     }
        // }
        // return dp[m][n];
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        
        for (int i = 1; i * i <= n; i++) {
            int sq = i * i;
            for (int j = sq; j <= n; j++) {
                dp[j] = min(dp[j], 1 + dp[j - sq]);
            }
        }
        return dp[n];
    }
