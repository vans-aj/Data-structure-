int func(vector<int>& val, vector<int>& wt,int capacity,int idx,int n,vector<vector<int>> &dp){
        if (idx == n||capacity==0){
            return 0;
        }
        if (dp[idx][capacity]!=-1){
            return dp[idx][capacity];
        }
        int val1 , val2;
        //checking can i include it 
        if (wt[idx]<=capacity){ 
            // first including it 
            val1 = val[idx]+func(val,wt,capacity-wt[idx],idx+1,n,dp);
            // excluding it
            val2 = func(val,wt,capacity,idx+1,n,dp);
        }
        //or i can only exclude it
        else {
            return dp[idx][capacity]=func(val,wt,capacity,idx+1,n,dp);
        }
        return dp[idx][capacity]=max(val1,val2);
    }
    int knapSack(int capacity, vector<int> &val, vector<int> &wt) {
        int n = val.size();
        vector<vector<int>>dp(n+1,vector<int>(capacity+1,0));
        // return func(val,wt,capacity,0,n,dp); for memoization
        // for tabulation
        for (int i=1; i<n+1; i++){
            for (int j=1; j<capacity+1; j++){
                //1st case is that including and excluding
                int w = wt[i-1];
                if (w<=j){
                    dp[i][j] = max(val[i-1]+dp[i-1][j-w],dp[i-1][j]);
                }
                //excluding only 
                else {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[n][capacity];
    }
