int find(vector<int>& nums, int idx, vector<int>& dp) {
        if (idx == 0) return nums[0];
        if (idx < 0) return 0;
        if (dp[idx] != -1) return dp[idx];
        return dp[idx] = max(nums[idx] + find(nums, idx - 2, dp), find(nums, idx - 1, dp));
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> dp1(n, -1), dp2(n, -1);
        vector<int> nums1(nums.begin(), nums.end() - 1);
        int case1 = find(nums1, n - 2, dp1);
        vector<int> nums2(nums.begin() + 1, nums.end());
        int case2 = find(nums2, n - 2, dp2);
        return max(case1, case2);
    }
