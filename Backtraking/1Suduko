bool check(int num , int i, int j,vector<vector<int>>& board ){
        for (int k =0; k<9; k++){
            if (board[i][k]==num )
            return false;
        }
        for (int k =0; k<9; k++){
            if (board[k][j]==num )
            return false;
        }
        int row = i/3*3 , col = j/3*3;
        for (int a =0; a<3; a++){
            for (int b = 0; b<3; b++){
                if (board[a+row][b+col] == num)
                return false;
            }
        }
        return 1;

    }
    bool find(int i, int j,vector<vector<int>>& board){
        if (i==9) return 1;
        if (j==9){
            return find(i+1,0,board);
        }
        if (board[i][j]!=0){
            return find(i,j+1,board);
        }
        else {
            for (int num=1; num<=9; num++){
                if(check(num,i,j,board)){
                    board[i][j] = num;
                    if (find(i,j+1,board))return 1;
                    board[i][j] = 0;
                }
            }
        }
        return 0;
    }
    void solveSudoku(vector<vector<int>> &board) {
        find(0,0,board);
    }
