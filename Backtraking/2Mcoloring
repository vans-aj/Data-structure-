bool isSafe(int node, int color[], vector<int> adj[], int v, int col) {
    for (auto it : adj[node]) {
        if (color[it] == col) return false;
    }
    return true;
}

bool solve(int node, int color[], int m, int v, vector<int> adj[]) {
    if (node == v) return true;  // All nodes are colored

    for (int col = 1; col <= m; col++) {
        if (isSafe(node, color, adj, v, col)) {
            color[node] = col;
            if (solve(node + 1, color, m, v, adj)) return true;
            color[node] = 0;  // Backtrack
        }
    }
    return false;
}

bool graphColoring(int v, vector<pair<int, int>>& edges, int m) {
    vector<int> adj[v];
    for (auto edge : edges) {
        adj[edge.first].push_back(edge.second);
        adj[edge.second].push_back(edge.first);
    }

    int color[v] = {0};  // Initialize color array
    return solve(0, color, m, v, adj);
}
